"use strict";

/*
 * Copyright (C) MIKO LLC - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Nikolay Beketov, 12 2019
 *
 */

/* global BackupApi, PbxApi, globalTranslate, Resumable, globalRootUrl, UserMessage */
var mergingCheckWorker = {
  timeOut: 3000,
  timeOutHandle: '',
  errorCounts: 0,
  $progressBarLabel: $('#upload-progress-bar').find('.label'),
  fileID: null,
  filePath: '',
  isXML: false,
  initialize: function () {
    function initialize(fileID, filePath) {
      var isXML = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      // Запустим обновление статуса провайдера
      mergingCheckWorker.fileID = fileID;
      mergingCheckWorker.isXML = isXML;
      mergingCheckWorker.filePath = filePath;
      mergingCheckWorker.restartWorker(fileID);
    }

    return initialize;
  }(),
  restartWorker: function () {
    function restartWorker() {
      window.clearTimeout(mergingCheckWorker.timeoutHandle);
      mergingCheckWorker.worker();
    }

    return restartWorker;
  }(),
  worker: function () {
    function worker() {
      PbxApi.FilesGetStatusUploadFile(mergingCheckWorker.fileID, mergingCheckWorker.cbAfterResponse);
      mergingCheckWorker.timeoutHandle = window.setTimeout(mergingCheckWorker.worker, mergingCheckWorker.timeOut);
    }

    return worker;
  }(),
  cbAfterResponse: function () {
    function cbAfterResponse(response) {
      if (mergingCheckWorker.errorCounts > 10) {
        mergingCheckWorker.$progressBarLabel.text(globalTranslate.bkp_UploadError);
        UserMessage.showError(globalTranslate.bkp_UploadError);
        window.clearTimeout(mergingCheckWorker.timeoutHandle);
      }

      if (response === undefined || Object.keys(response).length === 0) {
        mergingCheckWorker.errorCounts += 1;
        return;
      }

      if (response.d_status === 'UPLOAD_COMPLETE') {
        mergingCheckWorker.$progressBarLabel.text(globalTranslate.bkp_UploadComplete);
        BackupApi.BackupUnpackUploadedImgConf(mergingCheckWorker.filePath, mergingCheckWorker.cbAfterMoveBackupFile);
        window.clearTimeout(mergingCheckWorker.timeoutHandle);
      } else if (response.d_status !== undefined) {
        mergingCheckWorker.$progressBarLabel.text(globalTranslate.bkp_UploadProcessingFiles);
        mergingCheckWorker.errorCounts = 0;
      } else {
        mergingCheckWorker.errorCounts += 1;
      }
    }

    return cbAfterResponse;
  }(),
  cbAfterMoveBackupFile: function () {
    function cbAfterMoveBackupFile(response) {
      window.location.reload();
    }

    return cbAfterMoveBackupFile;
  }()
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9iYWNrdXAtaW5kZXgtd29ya2VyLmpzIl0sIm5hbWVzIjpbIm1lcmdpbmdDaGVja1dvcmtlciIsInRpbWVPdXQiLCJ0aW1lT3V0SGFuZGxlIiwiZXJyb3JDb3VudHMiLCIkcHJvZ3Jlc3NCYXJMYWJlbCIsIiQiLCJmaW5kIiwiZmlsZUlEIiwiZmlsZVBhdGgiLCJpc1hNTCIsImluaXRpYWxpemUiLCJyZXN0YXJ0V29ya2VyIiwid2luZG93IiwiY2xlYXJUaW1lb3V0IiwidGltZW91dEhhbmRsZSIsIndvcmtlciIsIlBieEFwaSIsIkZpbGVzR2V0U3RhdHVzVXBsb2FkRmlsZSIsImNiQWZ0ZXJSZXNwb25zZSIsInNldFRpbWVvdXQiLCJyZXNwb25zZSIsInRleHQiLCJnbG9iYWxUcmFuc2xhdGUiLCJia3BfVXBsb2FkRXJyb3IiLCJVc2VyTWVzc2FnZSIsInNob3dFcnJvciIsInVuZGVmaW5lZCIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJkX3N0YXR1cyIsImJrcF9VcGxvYWRDb21wbGV0ZSIsIkJhY2t1cEFwaSIsIkJhY2t1cFVucGFja1VwbG9hZGVkSW1nQ29uZiIsImNiQWZ0ZXJNb3ZlQmFja3VwRmlsZSIsImJrcF9VcGxvYWRQcm9jZXNzaW5nRmlsZXMiLCJsb2NhdGlvbiIsInJlbG9hZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7QUFRQTtBQUVBLElBQU1BLGtCQUFrQixHQUFHO0FBQzFCQyxFQUFBQSxPQUFPLEVBQUUsSUFEaUI7QUFFMUJDLEVBQUFBLGFBQWEsRUFBRSxFQUZXO0FBRzFCQyxFQUFBQSxXQUFXLEVBQUUsQ0FIYTtBQUkxQkMsRUFBQUEsaUJBQWlCLEVBQUVDLENBQUMsQ0FBQyxzQkFBRCxDQUFELENBQTBCQyxJQUExQixDQUErQixRQUEvQixDQUpPO0FBSzFCQyxFQUFBQSxNQUFNLEVBQUUsSUFMa0I7QUFNMUJDLEVBQUFBLFFBQVEsRUFBRSxFQU5nQjtBQU8xQkMsRUFBQUEsS0FBSyxFQUFFLEtBUG1CO0FBUTFCQyxFQUFBQSxVQVIwQjtBQUFBLHdCQVFmSCxNQVJlLEVBUVBDLFFBUk8sRUFRa0I7QUFBQSxVQUFmQyxLQUFlLHVFQUFQLEtBQU87QUFDM0M7QUFDQVQsTUFBQUEsa0JBQWtCLENBQUNPLE1BQW5CLEdBQTRCQSxNQUE1QjtBQUNBUCxNQUFBQSxrQkFBa0IsQ0FBQ1MsS0FBbkIsR0FBMkJBLEtBQTNCO0FBQ0FULE1BQUFBLGtCQUFrQixDQUFDUSxRQUFuQixHQUE4QkEsUUFBOUI7QUFDQVIsTUFBQUEsa0JBQWtCLENBQUNXLGFBQW5CLENBQWlDSixNQUFqQztBQUNBOztBQWR5QjtBQUFBO0FBZTFCSSxFQUFBQSxhQWYwQjtBQUFBLDZCQWVWO0FBQ2ZDLE1BQUFBLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQmIsa0JBQWtCLENBQUNjLGFBQXZDO0FBQ0FkLE1BQUFBLGtCQUFrQixDQUFDZSxNQUFuQjtBQUNBOztBQWxCeUI7QUFBQTtBQW1CMUJBLEVBQUFBLE1BbkIwQjtBQUFBLHNCQW1CakI7QUFDUkMsTUFBQUEsTUFBTSxDQUFDQyx3QkFBUCxDQUFnQ2pCLGtCQUFrQixDQUFDTyxNQUFuRCxFQUEyRFAsa0JBQWtCLENBQUNrQixlQUE5RTtBQUNBbEIsTUFBQUEsa0JBQWtCLENBQUNjLGFBQW5CLEdBQW1DRixNQUFNLENBQUNPLFVBQVAsQ0FDbENuQixrQkFBa0IsQ0FBQ2UsTUFEZSxFQUVsQ2Ysa0JBQWtCLENBQUNDLE9BRmUsQ0FBbkM7QUFJQTs7QUF6QnlCO0FBQUE7QUEwQjFCaUIsRUFBQUEsZUExQjBCO0FBQUEsNkJBMEJWRSxRQTFCVSxFQTBCQTtBQUN6QixVQUFJcEIsa0JBQWtCLENBQUNHLFdBQW5CLEdBQWlDLEVBQXJDLEVBQXlDO0FBQ3hDSCxRQUFBQSxrQkFBa0IsQ0FBQ0ksaUJBQW5CLENBQXFDaUIsSUFBckMsQ0FBMENDLGVBQWUsQ0FBQ0MsZUFBMUQ7QUFDQUMsUUFBQUEsV0FBVyxDQUFDQyxTQUFaLENBQXNCSCxlQUFlLENBQUNDLGVBQXRDO0FBQ0FYLFFBQUFBLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQmIsa0JBQWtCLENBQUNjLGFBQXZDO0FBQ0E7O0FBQ0QsVUFBSU0sUUFBUSxLQUFLTSxTQUFiLElBQTBCQyxNQUFNLENBQUNDLElBQVAsQ0FBWVIsUUFBWixFQUFzQlMsTUFBdEIsS0FBaUMsQ0FBL0QsRUFBa0U7QUFDakU3QixRQUFBQSxrQkFBa0IsQ0FBQ0csV0FBbkIsSUFBa0MsQ0FBbEM7QUFDQTtBQUNBOztBQUNELFVBQUlpQixRQUFRLENBQUNVLFFBQVQsS0FBc0IsaUJBQTFCLEVBQTZDO0FBQzVDOUIsUUFBQUEsa0JBQWtCLENBQUNJLGlCQUFuQixDQUFxQ2lCLElBQXJDLENBQTBDQyxlQUFlLENBQUNTLGtCQUExRDtBQUNBQyxRQUFBQSxTQUFTLENBQUNDLDJCQUFWLENBQXNDakMsa0JBQWtCLENBQUNRLFFBQXpELEVBQW1FUixrQkFBa0IsQ0FBQ2tDLHFCQUF0RjtBQUNBdEIsUUFBQUEsTUFBTSxDQUFDQyxZQUFQLENBQW9CYixrQkFBa0IsQ0FBQ2MsYUFBdkM7QUFDQSxPQUpELE1BSU8sSUFBSU0sUUFBUSxDQUFDVSxRQUFULEtBQXNCSixTQUExQixFQUFxQztBQUMzQzFCLFFBQUFBLGtCQUFrQixDQUFDSSxpQkFBbkIsQ0FBcUNpQixJQUFyQyxDQUEwQ0MsZUFBZSxDQUFDYSx5QkFBMUQ7QUFDQW5DLFFBQUFBLGtCQUFrQixDQUFDRyxXQUFuQixHQUFpQyxDQUFqQztBQUNBLE9BSE0sTUFHQTtBQUNOSCxRQUFBQSxrQkFBa0IsQ0FBQ0csV0FBbkIsSUFBa0MsQ0FBbEM7QUFDQTtBQUNEOztBQTlDeUI7QUFBQTtBQStDMUIrQixFQUFBQSxxQkEvQzBCO0FBQUEsbUNBK0NKZCxRQS9DSSxFQStDSztBQUM5QlIsTUFBQUEsTUFBTSxDQUFDd0IsUUFBUCxDQUFnQkMsTUFBaEI7QUFDQTs7QUFqRHlCO0FBQUE7QUFBQSxDQUEzQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKEMpIE1JS08gTExDIC0gQWxsIFJpZ2h0cyBSZXNlcnZlZFxuICogVW5hdXRob3JpemVkIGNvcHlpbmcgb2YgdGhpcyBmaWxlLCB2aWEgYW55IG1lZGl1bSBpcyBzdHJpY3RseSBwcm9oaWJpdGVkXG4gKiBQcm9wcmlldGFyeSBhbmQgY29uZmlkZW50aWFsXG4gKiBXcml0dGVuIGJ5IE5pa29sYXkgQmVrZXRvdiwgMTIgMjAxOVxuICpcbiAqL1xuXG4vKiBnbG9iYWwgQmFja3VwQXBpLCBQYnhBcGksIGdsb2JhbFRyYW5zbGF0ZSwgUmVzdW1hYmxlLCBnbG9iYWxSb290VXJsLCBVc2VyTWVzc2FnZSAqL1xuXG5jb25zdCBtZXJnaW5nQ2hlY2tXb3JrZXIgPSB7XG5cdHRpbWVPdXQ6IDMwMDAsXG5cdHRpbWVPdXRIYW5kbGU6ICcnLFxuXHRlcnJvckNvdW50czogMCxcblx0JHByb2dyZXNzQmFyTGFiZWw6ICQoJyN1cGxvYWQtcHJvZ3Jlc3MtYmFyJykuZmluZCgnLmxhYmVsJyksXG5cdGZpbGVJRDogbnVsbCxcblx0ZmlsZVBhdGg6ICcnLFxuXHRpc1hNTDogZmFsc2UsXG5cdGluaXRpYWxpemUoZmlsZUlELCBmaWxlUGF0aCwgaXNYTUwgPSBmYWxzZSkge1xuXHRcdC8vINCX0LDQv9GD0YHRgtC40Lwg0L7QsdC90L7QstC70LXQvdC40LUg0YHRgtCw0YLRg9GB0LAg0L/RgNC+0LLQsNC50LTQtdGA0LBcblx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIuZmlsZUlEID0gZmlsZUlEO1xuXHRcdG1lcmdpbmdDaGVja1dvcmtlci5pc1hNTCA9IGlzWE1MO1xuXHRcdG1lcmdpbmdDaGVja1dvcmtlci5maWxlUGF0aCA9IGZpbGVQYXRoO1xuXHRcdG1lcmdpbmdDaGVja1dvcmtlci5yZXN0YXJ0V29ya2VyKGZpbGVJRCk7XG5cdH0sXG5cdHJlc3RhcnRXb3JrZXIoKSB7XG5cdFx0d2luZG93LmNsZWFyVGltZW91dChtZXJnaW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSk7XG5cdFx0bWVyZ2luZ0NoZWNrV29ya2VyLndvcmtlcigpO1xuXHR9LFxuXHR3b3JrZXIoKSB7XG5cdFx0UGJ4QXBpLkZpbGVzR2V0U3RhdHVzVXBsb2FkRmlsZShtZXJnaW5nQ2hlY2tXb3JrZXIuZmlsZUlELCBtZXJnaW5nQ2hlY2tXb3JrZXIuY2JBZnRlclJlc3BvbnNlKTtcblx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSA9IHdpbmRvdy5zZXRUaW1lb3V0KFxuXHRcdFx0bWVyZ2luZ0NoZWNrV29ya2VyLndvcmtlcixcblx0XHRcdG1lcmdpbmdDaGVja1dvcmtlci50aW1lT3V0LFxuXHRcdCk7XG5cdH0sXG5cdGNiQWZ0ZXJSZXNwb25zZShyZXNwb25zZSkge1xuXHRcdGlmIChtZXJnaW5nQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgPiAxMCkge1xuXHRcdFx0bWVyZ2luZ0NoZWNrV29ya2VyLiRwcm9ncmVzc0JhckxhYmVsLnRleHQoZ2xvYmFsVHJhbnNsYXRlLmJrcF9VcGxvYWRFcnJvcik7XG5cdFx0XHRVc2VyTWVzc2FnZS5zaG93RXJyb3IoZ2xvYmFsVHJhbnNsYXRlLmJrcF9VcGxvYWRFcnJvcik7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KG1lcmdpbmdDaGVja1dvcmtlci50aW1lb3V0SGFuZGxlKTtcblx0XHR9XG5cdFx0aWYgKHJlc3BvbnNlID09PSB1bmRlZmluZWQgfHwgT2JqZWN0LmtleXMocmVzcG9uc2UpLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0bWVyZ2luZ0NoZWNrV29ya2VyLmVycm9yQ291bnRzICs9IDE7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmIChyZXNwb25zZS5kX3N0YXR1cyA9PT0gJ1VQTE9BRF9DT01QTEVURScpIHtcblx0XHRcdG1lcmdpbmdDaGVja1dvcmtlci4kcHJvZ3Jlc3NCYXJMYWJlbC50ZXh0KGdsb2JhbFRyYW5zbGF0ZS5ia3BfVXBsb2FkQ29tcGxldGUpO1xuXHRcdFx0QmFja3VwQXBpLkJhY2t1cFVucGFja1VwbG9hZGVkSW1nQ29uZihtZXJnaW5nQ2hlY2tXb3JrZXIuZmlsZVBhdGgsIG1lcmdpbmdDaGVja1dvcmtlci5jYkFmdGVyTW92ZUJhY2t1cEZpbGUpO1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dChtZXJnaW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSk7XG5cdFx0fSBlbHNlIGlmIChyZXNwb25zZS5kX3N0YXR1cyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIuJHByb2dyZXNzQmFyTGFiZWwudGV4dChnbG9iYWxUcmFuc2xhdGUuYmtwX1VwbG9hZFByb2Nlc3NpbmdGaWxlcyk7XG5cdFx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgPSAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgKz0gMTtcblx0XHR9XG5cdH0sXG5cdGNiQWZ0ZXJNb3ZlQmFja3VwRmlsZShyZXNwb25zZSl7XG5cdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHR9XG5cbn07Il19